                    ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
                    ;
                    ;
                    ;
                    ;
                    ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
                    ; one second intervals.
                    ;
                    ;
                    ;**************************************************************************************
                    ; Port definitions
                    ;**************************************************************************************
                    ;
                    ;
                    ;

                    ;Not used in this lab, but used in in-class activity
                    CONSTANT SSEG_PORT0, 40
					CONSTANT SSEG_PORT1, 20
					CONSTANT SSEG_PORT2, 10
                    
                    ;Used in this lab
                    CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.

                    CONSTANT DATA1_INPUT, 00	        ;input data port. this is an INPUT port.
                    CONSTANT DATA2_INPUT, 01
                    CONSTANT DATA3_INPUT, 02
                    CONSTANT DATA4_INPUT, 03

                    CONSTANT LED0_out, 01               ;output port for controlling LED0


                    ;**************************************************************************************
                    ; Special Register usage
                    ;**************************************************************************************
                    ;
                    ; No registers are given special names in this program.
                    ;
                    ;**************************************************************************************
                    ; Scratch Pad Memory Locations
                    ;**************************************************************************************
                    ;
                    ;
                    CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
                    CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
                    CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
                    CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
                    CONSTANT ISR_preserve_s4, 04        ;Preserve s4 contents during ISR
                    CONSTANT ISR_preserve_s5, 05        ;Preserve s5 contents during ISR
                    CONSTANT ISR_preserve_s6, 06        ;Preserve s6 contents during ISR
                    ;
                    ;
                    CONSTANT LED_pattern, 07            ;remember state of LEDs (8-bit counter in this case)
                    ;
                    ;
                    CONSTANT COUNTER, 08                ;counter counts from 0-255

                    ;Note: need 2 8-bit registers because our sum is 16-bit, but picoblaze only has 8 bit registers
                    CONSTANT ACCUMULATOR_Lower_8bit, 09 ;stores lower 8 bits of counter
                    CONSTANT ACCUMULATOR_Upper_8bit, 0A ;stores upper 8 bits of counter
                   

                    ;
                    ;**************************************************************************************
                    ; Useful data constants
                    ;**************************************************************************************
                    ;
                    ;
                    ; Constant to define a software delay of 1us. This must be adjusted to reflect the
                    ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                    ; calculation highly predictable. The '6' in the following equation even allows for
                    ; 'CALL delay_1us' instruction in the initiating code.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Example: For a 50MHz clock the constant value is (50-6)/4 = 11  (0B Hex).
                    ; For clock rates below 10MHz the value of 1 must be used and the operation will
                    ; become lower than intended. Interrupts may effect the timing of software based
                    ; delays.
                    ;
                    CONSTANT delay_1us_constant, 0B
                    ;
                    ;
                    ;
                    ; ASCII table
                    ;
                    CONSTANT character_a, 61
                    CONSTANT character_b, 62
                    CONSTANT character_c, 63
                    CONSTANT character_d, 64
                    CONSTANT character_e, 65
                    CONSTANT character_f, 66
                    CONSTANT character_g, 67
                    CONSTANT character_h, 68
                    CONSTANT character_i, 69
                    CONSTANT character_j, 6A
                    CONSTANT character_k, 6B
                    CONSTANT character_l, 6C
                    CONSTANT character_m, 6D
                    CONSTANT character_n, 6E
                    CONSTANT character_o, 6F
                    CONSTANT character_p, 70
                    CONSTANT character_q, 71
                    CONSTANT character_r, 72
                    CONSTANT character_s, 73
                    CONSTANT character_t, 74
                    CONSTANT character_u, 75
                    CONSTANT character_v, 76
                    CONSTANT character_w, 77
                    CONSTANT character_x, 78
                    CONSTANT character_y, 79
                    CONSTANT character_z, 7A
                    CONSTANT character_A, 41
                    CONSTANT character_B, 42
                    CONSTANT character_C, 43
                    CONSTANT character_D, 44
                    CONSTANT character_E, 45
                    CONSTANT character_F, 46
                    CONSTANT character_G, 47
                    CONSTANT character_H, 48
                    CONSTANT character_I, 49
                    CONSTANT character_J, 4A
                    CONSTANT character_K, 4B
                    CONSTANT character_L, 4C
                    CONSTANT character_M, 4D
                    CONSTANT character_N, 4E
                    CONSTANT character_O, 4F
                    CONSTANT character_P, 50
                    CONSTANT character_Q, 51
                    CONSTANT character_R, 52
                    CONSTANT character_S, 53
                    CONSTANT character_T, 54
                    CONSTANT character_U, 55
                    CONSTANT character_V, 56
                    CONSTANT character_W, 57
                    CONSTANT character_X, 58
                    CONSTANT character_Y, 59
                    CONSTANT character_Z, 5A
                    CONSTANT character_0, 30
                    CONSTANT character_1, 31
                    CONSTANT character_2, 32
                    CONSTANT character_3, 33
                    CONSTANT character_4, 34
                    CONSTANT character_5, 35
                    CONSTANT character_6, 36
                    CONSTANT character_7, 37
                    CONSTANT character_8, 38
                    CONSTANT character_9, 39
                    CONSTANT character_colon, 3A
                    CONSTANT character_stop, 2E
                    CONSTANT character_semi_colon, 3B
                    CONSTANT character_minus, 2D
                    CONSTANT character_divide, 2F       ;'/'
                    CONSTANT character_plus, 2B
                    CONSTANT character_comma, 2C
                    CONSTANT character_less_than, 3C
                    CONSTANT character_greater_than, 3E
                    CONSTANT character_equals, 3D
                    CONSTANT character_space, 20
                    CONSTANT character_CR, 0D           ;carriage return
                    CONSTANT character_question, 3F     ;'?'
                    CONSTANT character_dollar, 24
                    CONSTANT character_exclaim, 21      ;'!'
                    CONSTANT character_BS, 08           ;Back Space command character
                    ;
                    ;
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Initialise the system
                    ;**************************************************************************************
                    ;
        cold_start: LOAD s0, 00                         ;clear 1 second counter and clear LEDs
                    STORE s0, LED_pattern
                    OUTPUT s0, LED_port
                    ;
                    ;Initialize values to 0
                    OUTPUT s0, LED0_out
                    STORE s0, COUNTER
                    STORE s0, ACCUMULATOR_Lower_8bit
                    STORE s0, ACCUMULATOR_Upper_8bit
                    ;
                    ENABLE INTERRUPT                    ;enable one second heart beat
              
            	
					

					;**************************************************************************************
                    ; Main program
                    ;**************************************************************************************
                    ;
                    ; Display welcome message for design
                    ;
					
      main_program:
                    LOAD s0, 00 ;start with LED[0] off
                    output s0, LED0_out
                    CALL delay_1s

                    LOAD s0, 01 ;turn on LED[0]
                    output s0, LED0_out
                    CALL delay_1s
                    
                    JUMP main_program ;repeat infinitely
  



                    ;**************************************************************************************
                    ; Routines to display hexadecimal values 
                    ;**************************************************************************************
                    ;
                    ;
                    ; Convert hexadecimal value provided in register s0 into ASCII characters
                    ;
                    ; The value provided must can be any value in the range 00 to FF and will be converted into
                    ; two ASCII characters.
                    ;     The upper nibble will be represented by an ASCII character returned in register s3.
                    ;     The lower nibble will be represented by an ASCII character returned in register s2.
                    ;
                    ; The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
                    ; added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
                    ; hexadecimal requiring a further addition of 07 to the 30 already added.
                    ;
                    ; Registers used s0, s2 and s3.
                    ;
 hex_byte_to_ASCII: LOAD s2, s0                         ;remember value supplied
                    SR0 s0                              ;isolate upper nibble
                    SR0 s0
                    SR0 s0
                    SR0 s0
                    CALL hex_to_ASCII                   ;convert
                    LOAD s3, s0                         ;upper nibble value in s3
                    LOAD s0, s2                         ;restore complete value
                    AND s0, 0F                          ;isolate lower nibble
                    CALL hex_to_ASCII                   ;convert
                    LOAD s2, s0                         ;lower nibble value in s2
                    RETURN
                    ;
                    ; Convert hexadecimal value provided in register s0 into ASCII character
                    ;
                    ;Register used s0
                    ;
      hex_to_ASCII: SUB s0, 0A                          ;test if value is in range 0 to 9
                    JUMP C, number_char
                    ADD s0, 07                          ;ASCII char A to F in range 41 to 46
       number_char: ADD s0, 3A                          ;ASCII char 0 to 9 in range 30 to 40
                    RETURN
                   
                 


                    ;**************************************************************************************
                    ; Software delay routines
                    ;**************************************************************************************
                    ;
                    ; Delay of 1us.
                    ;
                    ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
                    ; instruction executes in 2 clock cycles making the calculation highly predictable.
                    ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
                    ; in the initiating code. Interrupts may effect software derived delays.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Registers used s0
                    ;
         delay_1us: LOAD s0, delay_1us_constant
          wait_1us: SUB s0, 01
                    JUMP NZ, wait_1us
                    RETURN
                    ;
                    ; Delay of 40us.
                    ;
                    ; Registers used s0, s1
                    ;
        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
         wait_40us: CALL delay_1us
                    SUB s1, 01
                    JUMP NZ, wait_40us
                    RETURN
                    ;
                    ;
                    ; Delay of 1ms.
                    ;
                    ; Registers used s0, s1, s2
                    ;
         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
          wait_1ms: CALL delay_40us
                    SUB s2, 01
                    JUMP NZ, wait_1ms
                    RETURN
                    ;
                    ; Delay of 20ms.
                    ;
                    ; Delay of 20ms used during initialisation.
                    ;
                    ; Registers used s0, s1, s2, s3
                    ;
        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
         wait_20ms: CALL delay_1ms
                    SUB s3, 01
                    JUMP NZ, wait_20ms
                    RETURN
					
		delay_100ms: LOAD s3, 64                         ;100 x 1ms = 20ms
         wait_100ms: CALL delay_1ms
                     SUB s3, 01
                     JUMP NZ, wait_100ms
                     RETURN		
					 
		delay_200ms: LOAD s3, 02
        wait_200ms: CALL delay_1ms
                    SUB s3, 01
                    JUMP NZ, wait_1ms
                    RETURN	
					
                    ;
                    ; Delay of approximately 1 second.
                    ;
                    ; Registers used s0, s1, s2, s3, s4
                    ;
          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
           wait_1s: CALL delay_20ms
                    SUB s4, 01
                    JUMP NZ, wait_1s
                    RETURN

                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Service Routine (ISR)
                    ;**************************************************************************************
                    ;
                    ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
                    ; on the 8 LEDs.
                    ;
                
 
               ISR: ;preserve variables (callee save)
                    STORE s0, ISR_preserve_s0 ;use s0 as a temporary variable
                    STORE s1, ISR_preserve_s1 ;
                    STORE s2, ISR_preserve_s2 ;store value of counter in s2
                    STORE s3, ISR_preserve_s3
                    STORE s4, ISR_preserve_s4
                    STORE s5, ISR_preserve_s5 ;lower 8 bits of accumulator
                    STORE s6, ISR_preserve_s6 ;upper 8 bits of accumulator


                    ;Accumulator variables
                    FETCH s5, ACCUMULATOR_Lower_8bit ;Note: need 2 8-bit registers because our sum is 16-bit, but picoblaze only has 8 bit registers
                    FETCH s6, ACCUMULATOR_Upper_8bit
                    

                    ;Repeat following steps 4 times (there are 4 samples per each Flash data read)

                    ;Read audio samples
                    INPUT s0, DATA1_INPUT ;input data is 8-bit
                    CALL ABS_VALUE ;check absolute value
                    ADD s5, s0 ;add the absolute value to the accumulator
                    addcy s6, 00


                    ;Read audio samples
                    INPUT s0, DATA2_INPUT ;input data is 8-bit
                    CALL ABS_VALUE ;check absolute value
                    ADD s5, s0 ;add the absolute value to the accumulator
                    addcy s6, 00


                    ;Read audio samples
                    INPUT s0, DATA3_INPUT ;input data is 8-bit
                    CALL ABS_VALUE ;check absolute value
                    ADD s5, s0 ;add the absolute value to the accumulator
                    addcy s6, 00


                    ;Read audio samples
                    INPUT s0, DATA4_INPUT ;input data is 8-bit
                    CALL ABS_VALUE ;check absolute value
                    ADD s5, s0 ;add the absolute value to the accumulator
                    addcy s6, 00
                    

                    ;Store updated accumulator values
                    STORE s5, ACCUMULATOR_Lower_8bit
                    STORE s6, ACCUMULATOR_Upper_8bit


                    ;
                    ; Update counter
                    FETCH s2, COUNTER
                    ADD s2, 04 ;add 4 because there are 4 samples
                    STORE s2, COUNTER


                    ; Check counter
                    COMPARE s2, 00     ;Overflow because 256 is overflowed (0xFC + 4 = 0x00)
                    JUMP NZ, END_ISR


                    ; Compute average and reset values to 0
                    CALL COMPUTE_AVERAGE
                    CALL RESET


                END_ISR: ;end ISR, reload variables (callee save), return from interrupt
                    FETCH s0, ISR_preserve_s0
                    FETCH s1, ISR_preserve_s1
                    FETCH s2, ISR_preserve_s2
                    FETCH s3, ISR_preserve_s3
                    FETCH s4, ISR_preserve_s4
                    FETCH s5, ISR_preserve_s5
                    FETCH s6, ISR_preserve_s6

                    RETURNI ENABLE
               
               

               ABS_VALUE: ;check if value is absolute value, if negative, must change it to absolute value
                    ;Psuedo-code:
                        ;if MSB is 1, then it is negative number
                            ;must bitwise negate the number and add 1
                        ;else, return

                    TEST s0, 80 ;bitwise AND between s0 and 80 (hex for binary 1000_0000) (MSB)
                    JUMP Z, finish_abs

                    XOR s0, FF ;convert from negative to positive number
                    ADD s0, 01
                finish_abs:
                    RETURN


                COMPUTE_AVERAGE:
                    FETCH s0, ACCUMULATOR_Upper_8bit ;average is just the top 8 bits, don't need to worry about lower 8 bits

                    LOAD s1, 80 ;start with MSB, find first 1 (highest bit), easier to do this than the other way around (starting from LSB)
                    LOAD s2, 00 ;count, number of times needed to shift right until it reaches MSB of accumulator value
                    CALL find_MSB
                    RETURN
                
                find_MSB:
                    TEST s0, s1             ;TEST is a bitwise AND between s0 and s1, checks when MSB aligns
                    JUMP NZ, Display_LEDs   ;if not zero, we have the MSB, can display value
                    SR0 s1                  ;Shift left to next bit, try to find the most significant bit with a 1
                    ADD s2, 01              ;Count number of shifts we needed to do
                    JUMP find_MSB           ;repeat the steps until we find the MSB


                Display_LEDs:
                    LOAD s0, FF ;start with highest bit, indicating all LEDs are turned on (Note: we start at LED[9] as minimum value and LED[2] as largest value, therefore we need 1111_1111)

                shift_loop:
                    SUB s2, 01 ;subtract 1 each time, up to counter amount of times in find_MSB
                    JUMP C, write_leds ;if we subtract and get less than 0, it gives a carry, we can use this to indicate we should break from loop
                    SL0 s0 ;shift left, shifting left decreases value on LEDs (eg. 1110_0000 indicates MSB of 2, remember LED[9] is lowest number)
                    JUMP shift_loop ;repeat loop again, until we get desired result

                write_leds: ;output to LED[9:2] port
                    OUTPUT s0, LED_port
                    RETURN


                ;Reset accumulator
                RESET:
                    LOAD s0, 00 ;reset values to 0
                    STORE s0, COUNTER
                    STORE s0, ACCUMULATOR_Lower_8bit
                    STORE s0, ACCUMULATOR_Upper_8bit
                    RETURN
                    



                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Vector
                    ;**************************************************************************************
                    ;
                    ADDRESS 3FF
                    JUMP ISR
                    ;
                    ;
